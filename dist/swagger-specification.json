{
    "Contact Object": {
        "description": "Contact information for the exposed API.",
        "allowExtension": true,
        "swaggerTypeURL": "http://swagger.io/specification/#contactObject",
        "fields": [{
            "name": "name",
            "type": "string",
            "description": "The identifying name of the contact person/organization."
        }, {
            "name": "url",
            "type": "string",
            "description": "The URL pointing to the contact information.\nMUST be in the format of a URL.\n"
        }, {
            "name": "email",
            "type": "string",
            "description": "The email address of the contact person/organization.  \nMUST be in the format of an email address.\n"
        }]
    },
    "Definitions Object": {
        "description": "An object to hold data types that can be consumed and produced by operations. These data types can be primitives, arrays or models.",
        "fields": [{
            "name": "{name}",
            "type": "Schema Object",
            "description": "A single definition, mapping a *name* to the schema it defines.",
            "patterned": true
        }]
    },
    "External Documentation Object": {
        "description": "Allows referencing an external resource for extended documentation.",
        "allowExtension": true,
        "fields": [{
            "name": "description",
            "type": "string",
            "description": "A short description of the target documentation.",
            "gfm": true
        }, {
            "name": "url",
            "type": "string",
            "description": "The URL for the target documentation.  \nValue MUST be in the format of a URL.\n",
            "required": true
        }]
    },
    "Headers Object": {
        "description": "The name of the property corresponds to the name of the header. The value describes the type of the header.",
        "fields": [{
            "name": "{name}",
            "patterned": true,
            "description": "The name of the property corresponds to the name of the header.  \nThe value describes the type of the header.\n"
        }]
    },
    "Info Object": {
        "description": "Provides metadata about the API. The metadata can be used by the clients if needed.",
        "allowExtension": true,
        "swaggerTypeURL": "http://swagger.io/specification/#infoObject",
        "swaggerType": true,
        "fields": [{
            "name": "title",
            "type": "string",
            "required": true,
            "description": "The title of the application."
        }, {
            "name": "description",
            "type": "string",
            "gfm": true,
            "description": "A short description of the application."
        }, {
            "name": "termsOfService",
            "type": "string",
            "description": "The Terms of Service for the API."
        }, {
            "name": "contact",
            "type": "Contact Object",
            "description": "The contact information for the exposed API."
        }, {
            "name": "licence",
            "type": "Licence Object",
            "description": "The license information for the exposed API."
        }, {
            "name": "version",
            "type": "string",
            "required": true,
            "description": "Provides the version of the application API (not to be confused with the specification version)."
        }]
    },
    "Licence Object": {
        "description": "License information for the exposed API.",
        "allowExtension": true,
        "fields": [{
            "name": "name",
            "type": "string",
            "required": true,
            "description": "The license name used for the API."
        }, {
            "name": "url",
            "type": "string",
            "description": "A URL to the license used for the API.  \nMUST be in the format of a URL.\n"
        }]
    },
    "Operation Object": {
        "description": "Describes a single API operation on a path.",
        "allowExtension": true,
        "fields": [{
            "name": "tags",
            "type": "[string]",
            "description": "A list of tags for API documentation control.\nTags can be used for logical grouping of operations by resources or any other qualifier.\n"
        }, {
            "name": "summary",
            "type": "string",
            "description": "A short summary of what the operation does.\nFor maximum readability in the swagger-ui, this field SHOULD be less than 120 characters.\n"
        }, {
            "name": "description",
            "type": "string",
            "description": "A verbose explanation of the operation behavior.",
            "gfm": true
        }, {
            "name": "externalDocs",
            "type": "External Documentation Object",
            "description": "Additional external documentation for this operation."
        }, {
            "name": "operationId",
            "type": "string",
            "description": "Unique string used to identify the operation.\nThe id MUST be unique among all operations described in the API.\nTools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.\n"
        }, {
            "name": "consumes",
            "type": "[string]",
            "description": "A list of MIME types the operation can consume.\nThis overrides the consumes definition at the Swagger Object.\nAn empty value MAY be used to clear the global definition.\nValue MUST be as described under Mime Types.\n"
        }, {
            "name": "produces",
            "type": "[string]",
            "description": "A list of MIME types the operation can produce.\nThis overrides the produces definition at the Swagger Object.\nAn empty value MAY be used to clear the global definition.\nValue MUST be as described under Mime Types.\n"
        }, {
            "name": "parameters",
            "type": "[Parameter Object | Reference Object]",
            "description": "A list of parameters that are applicable for this operation.\nIf a parameter is already defined at the Path Item, the new definition will override it, but can never remove it.\nThe list MUST NOT include duplicated parameters.\nA unique parameter is defined by a combination of a name and location.\nThe list can use the Reference Object to link to parameters that are defined at the Swagger Object's parameters.\nThere can be one *body* parameter at most.\n",
            "allowReference": true
        }, {
            "name": "responses",
            "type": "Responses",
            "required": true,
            "description": "The list of possible responses as they are returned from executing this operation."
        }, {
            "name": "schemes",
            "type": "[string]",
            "description": "The transfer protocol for the operation.\nThe value overrides the Swagger Object schemes definition.\n",
            "values": [{
                "value": "http"
            }, {
                "value": "https"
            }, {
                "value": "ws",
                "description": "Web socket scheme"
            }, {
                "value": "wss",
                "description": "Secured web socket scheme"
            }]
        }, {
            "name": "deprecated",
            "type": "boolean",
            "description": "Declares this operation to be deprecated.\nUsage of the declared operation should be refrained.\nDefault value is false.\n"
        }, {
            "name": "security",
            "type": "[Security Requirement Object]",
            "description": "A declaration of which security schemes are applied for this operation.\nThe list of values describes alternative security schemes that can be used (that is, there is a logical OR between the security requirements).\nThis definition overrides any declared top-level security.\nTo remove a top-level security declaration, an empty array can be used.\n"
        }]
    },
    "Parameter Object": {
        "description": "Describes a single operation parameter.\nA unique parameter is defined by a combination of a name and location (in).\n",
        "allowExtension": true,
        "fields": [{
            "name": "in",
            "type": "string",
            "description": "The location of the parameter.",
            "values": [{
                "value": "query",
                "description": "Parameters that are appended to the URL.  For example, in */items?id=value*, the query parameter is id."
            }, {
                "value": "header",
                "description": "Custom headers that are expected as part of the request."
            }, {
                "value": "path",
                "description": "Used together with Path Templating, where the parameter value is actually part of the operation's URL.\nThis does not include the host or base path of the API.\nFor example, in */items/{itemId}*, the path parameter is itemId.\n"
            }, {
                "value": "formData",
                "description": "Used to describe the payload of an HTTP request when either *application/x-www-form-urlencoded* or *multipart/form-data* are used as the content type of the request (in Swagger's definition, the consumes property of an operation).\nThis is the only parameter type that can be used to send files, thus supporting the file type.\nSince form parameters are sent in the payload, they cannot be declared together with a body parameter for the same operation.\nForm parameters have a different format based on the content-type used (for further details, consult http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4):\n\n  - application/x-www-form-urlencoded - Similar to the format of Query parameters but as a payload.  For example, foo=1&bar=swagger - both foo and bar are form parameters. This is normally used for simple parameters that are being transferred.\n  - multipart/form-data - Each parameter takes a section in the payload with an internal header.  For example, for the header Content-Disposition: form-data; name=\"submit-name\" the name of the parameter is submit-name. This type of form parameters is more commonly used for file transfers.\n"
            }, {
                "value": "body",
                "description": "The payload that's appended to the HTTP request.\nSince there can only be one payload, there can only be one body parameter.\nThe name of the body parameter has no effect on the parameter itself and is used for documentation purposes only.\nSince Form parameters are also in the payload, body and form parameters cannot exist together for the same operation.\n"
            }]
        }, {
            "name": "<in is body>",
            "type": "Parameter Object Body",
            "description": "Fields if *in* value is *body*."
        }, {
            "name": "<in is not body>",
            "type": "Parameter Object Not Body",
            "description": "Fields if *in* value is *query*, *header*, *path* or *formData*."
        }, {
            "name": "description",
            "type": "string",
            "gfm": true,
            "description": "A brief description of the parameter.\nThis could contain examples of use.\n"
        }, {
            "name": "required",
            "type": "boolean",
            "description": "Determines whether this parameter is mandatory.\nIf the parameter is in *path*, this property is required and its value MUST be true.\nOtherwise, the property MAY be included and its default value is false.\n"
        }]
    },
    "Parameter Object Array": {
        "description:": "Fields if parameter type is array.",
        "fieldsGroup": true,
        "fields": [{
            "name": "items",
            "type": "Items Object",
            "description": "Describes the type of items in the array."
        }, {
            "name": "collectionFormat",
            "type": "string",
            "description": "Determines the format of the array if type array is used.\n",
            "values": [{
                "value": "csv",
                "description": "Comma separated values *foo,bar*.",
                "default": true
            }, {
                "value": "ssv",
                "description": "Space separated values *foo bar*."
            }, {
                "value": "tsv",
                "description": "Tab separated values *foo\\\\tbar*."
            }, {
                "value": "pipes",
                "description": "Pipe separated values *foo|bar*."
            }, {
                "value": "multi",
                "description": "Corresponds to multiple parameter instances instead of multiple values for a single instance *foo=bar&foo=baz*.\nThis is valid only for parameters in *query* or *formData*.\n"
            }]
        }, {
            "name": "maxItems",
            "type": "number",
            "description": "Maximum count of items in array"
        }, {
            "name": "minItems",
            "type": "number",
            "description": "Minimum count of items in array."
        }, {
            "name": "uniqueItems",
            "type": "boolean",
            "description": "Allow only unique items in array."
        }]
    },
    "Parameter Object Body": {
        "description": "Fields if *in* value is *body*.",
        "fieldsGroup": true,
        "fields": [{
            "name": "body",
            "required": true,
            "type": "Schema Object",
            "description": "The schema defining the type used for the body parameter."
        }]
    },
    "Parameter Object File": {
        "description": "A File parameter",
        "fieldsGroup": true,
        "fields": [{
            "name": "maxLength",
            "type": "integer",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor26."
        }, {
            "name": "minLength",
            "type": "integer",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor29."
        }]
    },
    "Parameter Object Not Array Or File": {
        "description": "Fields if *type* value is *string*, *number*, *integer* or *boolean*.",
        "fieldsGroup": true,
        "fields": [{
            "name": "format",
            "type": "string",
            "description": "The extending format for the previously mentioned type.\nSee Data Type Formats for further details.\n"
        }, {
            "name": "allowEmptyValue",
            "type": "boolean",
            "description": "Sets the ability to pass empty-valued parameters.\nThis is valid only for either query or formData parameters and allows you to send a parameter with a name only or an empty value.  \nDefault value is false.\n"
        }, {
            "name": "<type is string>",
            "type": "Parameter Object String",
            "description": "Fields if *type* is *string*."
        }, {
            "name": "<type is number or integer>",
            "type": "Parameter Object Number Or Integer",
            "description": "Fields if *type* is *number* or *integer*."
        }]
    },
    "Parameter Object Not Body": {
        "description": "Fields if *in* value is *query*, *header*, *path* or *formData*.",
        "fieldsGroup": true,
        "fields": [{
            "name": "type",
            "type": "string",
            "description": "The type of the parameter.\nSince the parameter is not located at the request body, it is limited to simple types (that is, not an object).\n",
            "values": [{
                "value": "string"
            }, {
                "value": "number"
            }, {
                "value": "integer"
            }, {
                "value": "boolean"
            }, {
                "value": "array"
            }, {
                "value": "file",
                "description": "If type is *file*, the consumes MUST be either *multipart/form-data* or *application/x-www-form-urlencoded* and the parameter MUST be in *formData*."
            }]
        }, {
            "name": "<type is array>",
            "type": "Parameter Object Array",
            "description": "Fields if *type* value is *array*."
        }, {
            "name": "<type is file>",
            "type": "Parameter Object File",
            "description": "Fields if *type* value is *file*."
        }, {
            "name": "<type is not array or file>",
            "type": "Parameter Object Not Array Or File",
            "description": "Fields if *type* value is *string*, *number*, *integer* or *boolean*."
        }, {
            "name": "default",
            "description": "Declares the value of the parameter that the server will use if none is provided.\nFor example a *count* to control the number of results per page might default to 100 if not supplied by the client in the request.\n(Note: *default* has no meaning for required parameters.)\nUnlike JSON Schema this value MUST conform to the defined type for this parameter.\nSee http://json-schema.org/latest/json-schema-validation.html#anchor101.\n"
        }, {
            "name": "enum",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor76."
        }]
    },
    "Parameter Object Number": {
        "description": "A number or integer parameter",
        "fieldsGroup": true,
        "fields": [{
            "name": "maximum",
            "type": "number",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor17."
        }, {
            "name": "exclusiveMaximum",
            "type": "boolean",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor17."
        }, {
            "name": "minimum",
            "type": "number",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor21."
        }, {
            "name": "exclusiveMinimum",
            "type": "boolean",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor21."
        }, {
            "name": "multipleOf",
            "type": "number",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor14."
        }]
    },
    "Parameter Object String": {
        "description": "A string parameter",
        "fieldsGroup": true,
        "fields": [{
            "name": "pattern",
            "type": "string",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor33."
        }, {
            "name": "maxLength",
            "type": "integer",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor26."
        }, {
            "name": "minLength",
            "type": "integer",
            "description": "See http://json-schema.org/latest/json-schema-validation.html#anchor29."
        }]
    },
    "Parameters Definitions Object": {
        "description": null,
        "fields": [{
            "name": "{name}",
            "type": "Parameter Object",
            "description": "A single parameter definition, mapping a *name* to the parameter it defines.",
            "patterned": true
        }]
    },
    "Path Item Object": {
        "description": "Describes the operations available on a single path.\nA Path Item may be empty, due to ACL constraints.\nThe path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.\n",
        "allowExtension": true,
        "fields": [{
            "name": "$ref",
            "type": "string",
            "description": "Allows for an external definition of this path item.\nThe referenced structure MUST be in the format of a Path Item Object.\nIf there are conflicts between the referenced definition and this Path Item's definition, the behavior is undefined.\n"
        }, {
            "name": "get",
            "type": "Operation Object",
            "description": "A definition of a GET operation on this path."
        }, {
            "name": "put",
            "type": "Operation Object",
            "description": "A definition of a PUT operation on this path."
        }, {
            "name": "post",
            "type": "Operation Object",
            "description": "A definition of a POST operation on this path."
        }, {
            "name": "delete",
            "type": "Operation Object",
            "description": "A definition of a DELETE operation on this path."
        }, {
            "name": "options",
            "type": "Operation Object",
            "description": "A definition of a OPTIONS operation on this path."
        }, {
            "name": "head",
            "type": "Operation Object",
            "description": "A definition of a HEAD operation on this path."
        }, {
            "name": "patch",
            "type": "Operation Object",
            "description": "A definition of a PATCH operation on this path."
        }, {
            "name": "parameters",
            "type": "[Parameter Object | Reference Object]",
            "description": "A list of parameters that are applicable for all the operations described under this path.\nThese parameters can be overridden at the operation level, but cannot be removed there.\nThe list MUST NOT include duplicated parameters.\nA unique parameter is defined by a combination of a name and location.\nThe list can use the Reference Object to link to parameters that are defined at the Swagger Object's parameters.\nThere can be one *body* parameter at most.\n"
        }]
    },
    "Paths Object": {
        "description": "Holds the relative paths to the individual endpoints.\nThe path is appended to the basePath in order to construct the full URL.\nThe Paths may be empty, due to ACL constraints.\n",
        "allowExtension": true,
        "fields": [{
            "name": "/{path}",
            "type": "Path Item Object",
            "required": true,
            "description": "A relative path to an individual endpoint.\nThe field name MUST begin with a slash.\nThe path is appended to the basePath in order to construct the full URL.\nPath templating is allowed.\n"
        }]
    },
    "Reference Object": {
        "description": "A simple object to allow referencing other definitions in the specification.\nIt can be used to reference parameters and responses that are defined at the top level for reuse.\nThe Reference Object is a JSON Reference that uses a JSON Pointer as its value.\nFor this specification, only canonical dereferencing is supported.\n",
        "fields": [{
            "name": "$ref",
            "type": "string",
            "description": "The reference string.",
            "required": true
        }]
    },
    "Response Object": {
        "description": "Describes a single response from an API Operation.",
        "allowExtension": true,
        "fields": [{
            "name": "description",
            "type": "string",
            "required": true,
            "gfm": true,
            "description": "A short description of the response. GFM syntax can be used for rich text representation."
        }, {
            "name": "schema",
            "type": "Schema Object",
            "description": "A definition of the response structure.\nIt can be a primitive, an array or an object.\nIf this field does not exist, it means no content is returned as part of the response.\nAs an extension to the Schema Object, its root type value may also be \"file\".\nThis SHOULD be accompanied by a relevant produces mime-type.\n"
        }, {
            "name": "headers",
            "type": "Headers Object",
            "description": "A list of headers that are sent with the response."
        }, {
            "name": "example",
            "type": "Example Object",
            "description": "An example of the response message."
        }]
    },
    "Responses Definitions Object": {
        "description": "An object to hold responses to be reused across operations.\nResponse definitions can be referenced to the ones defined here.\nThis does not define global operation responses.\n",
        "fields": [{
            "name": "{name}",
            "type": "Response Object",
            "patterned": true,
            "description": "A single response definition, mapping a \"name\" to the response it defines."
        }]
    },
    "Schema Object": {
        "description": "The Schema Object allows the definition of input and output data types.\nThese types can be objects, but also primitives and arrays.\nThis object is based on the JSON Schema Specification Draft 4 and uses a predefined subset of it.\nOn top of this subset, there are extensions provided by this specification to allow for more complete documentation.\n"
    },
    "Scopes Object": {
        "description": null,
        "allowExtension": true,
        "fields": [{
            "name": "{name}",
            "type": "string",
            "description": "Maps between a name of a scope to a short description of it (as the value of the property).",
            "patterned": true
        }]
    },
    "Security Definitions Object": {
        "description": "A declaration of the security schemes available to be used in the specification. This does not enforce the security schemes on the operations and only serves to provide the relevant details for each scheme.",
        "allowExtension": true,
        "fields": [{
            "name": "{name}",
            "type": "Security Scheme Object",
            "description": "A single security scheme definition, mapping a *name* to the scheme it defines.",
            "patterned": true
        }]
    },
    "Security Requirement Object": {
        "allowExtension": true,
        "fields": [{
            "name": "{name}",
            "type": "[string]",
            "description": "Each name must correspond to a security scheme which is declared in the Security Definitions. If the security scheme is of type \\oauth2\\, then the value is a list of scope names required for the execution. For other security scheme types, the array MUST be empty."
        }]
    },
    "Security Scheme Object": {
        "description": "Allows the definition of a security scheme that can be used by the operations.\nSupported schemes are basic authentication, an API key (either as a header or as a query parameter) and OAuth2's common flows (implicit, password, application and access code).\n",
        "allowExtension": true,
        "fields": [{
            "name": "type",
            "type": "string",
            "description": "The type of the security scheme.",
            "required": true,
            "values": ["basic", "apiKey", "oauth2"]
        }, {
            "name": "description",
            "type": "string",
            "description": "A short description for security scheme."
        }, {
            "name": "<type is apiKey>",
            "type": "Security Scheme Object ApiKey",
            "description": "Fields if *type* value is *apiKey*."
        }, {
            "name": "<type is oauth2>",
            "type": "Security Scheme Object ApiKey",
            "description": "Fields if *type* value is *oauth2*."
        }]
    },
    "Security Scheme Object ApiKey": {
        "description": null,
        "fieldsGroup": true,
        "fields": [{
            "name": "apiKey",
            "type": "string",
            "description": "The name of the header or query parameter to be used.",
            "required": true
        }, {
            "name": "in",
            "type": "string",
            "description": "The location of the API key.",
            "required": true,
            "values": ["query", "header"]
        }]
    },
    "Security Scheme Object Oauth": {
        "description": null,
        "fieldsGroup": true,
        "fields": [{
            "name": "flow",
            "type": "string",
            "description": "The flow used by the OAuth2 security scheme. Valid values are \\implicit\\, \\password\\, \\application\\ or \\accessCode\\.",
            "values": ["implicit", "password", "application", "accessCode"],
            "required": true
        }, {
            "name": "authorizationUrl",
            "type": "string",
            "description": "The authorization URL to be used for this flow (implicit or access code). This SHOULD be in the form of a URL.",
            "required": true
        }, {
            "name": "tokenUrl",
            "type": "string",
            "description": "The token URL to be used for this flow (password, application or access code). This SHOULD be in the form of a URL.",
            "required": true
        }, {
            "name": "scopes",
            "type": "Scopes Object",
            "description": "The available scopes for the OAuth2 security scheme."
        }]
    },
    "Specification Extensions": {
        "name": "^x-",
        "type": "Any",
        "patterned": true,
        "swaggerType": true,
        "description": "While the Swagger Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.\nThe field name MUST begin with x-, for example, x-internal-id.\nThe value can be null, a primitive, an array or an object.\nThe extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).\n"
    },
    "Swagger Object": {
        "name": "Swagger definition",
        "description": "This is the *root* document object for the API specification.\nIt combines what previously was the Resource Listing and API Declaration (version 1.2 and earlier) together into one document.\n",
        "allowExtension": true,
        "swaggerType": true,
        "swaggerTypeURL": "http://swagger.io/specification/#swaggerObject",
        "fields": [{
            "name": "swagger",
            "type": "string",
            "required": true,
            "description": "Specifies the Swagger Specification version being used.\nIt can be used by the Swagger UI and other clients to interpret the API listing.\n",
            "values": [{
                "value": "2.0",
                "description": "The value MUST be 2.0"
            }]
        }, {
            "name": "info",
            "type": "Info Object",
            "required": true,
            "description": "Provides metadata about the API.\nThe metadata can be used by the clients if needed.\n"
        }, {
            "name": "host",
            "type": "string",
            "description": "The host (name or ip) serving the API.\nThis MUST be the host only and does not include the scheme nor sub-paths.\nIt MAY include a port.\nIf the host is not included, the host serving the documentation is to be used (including the port).\nThe host does not support path templating.\n"
        }, {
            "name": "basePath",
            "type": "string",
            "required": false,
            "description": "The base path on which the API is served, which is relative to the host.\nIf it is not included, the API is served directly under the host.\nThe value MUST start with a leading slash (/).\nThe basePath does not support path templating.\n"
        }, {
            "name": "schemes",
            "type": ["string"],
            "description": "The transfer protocol of the API.\nIf the schemes is not included, the default scheme to be used is the one used to access the Swagger definition itself.\n",
            "values": [{
                "value": "http"
            }, {
                "value": "https"
            }, {
                "value": "ws",
                "description": "Web socket scheme"
            }, {
                "value": "wss",
                "description": "Secured web socket scheme"
            }]
        }, {
            "name": "consumes",
            "type": ["string"],
            "description\"": "A list of MIME types the APIs can consume.\nThis is global to all APIs but can be overridden on specific API calls.\nValue MUST be as described under Mime Types.\n"
        }, {
            "name": "produces",
            "type": ["string"],
            "description": "A list of MIME types the APIs can produce.\nThis is global to all APIs but can be overridden on specific API calls.\nValue MUST be as described under Mime Types.\n"
        }, {
            "name": "paths",
            "type": "Paths Object",
            "required": true,
            "description": "The available paths and operations for the API."
        }, {
            "name": "definitions",
            "type": "Definitions Object",
            "description": "An object to hold data types produced and consumed by operations."
        }, {
            "name": "parameters",
            "type": "Parameters Definitions Object",
            "description": "An object to hold parameters that can be used across operations.\nThis property does not define global parameters for all operations.\n"
        }, {
            "name": "responses",
            "type": "Responses Definitions Object",
            "description": "An object to hold responses that can be used across operations.\nThis property does not define global responses for all operations.\n"
        }, {
            "name": "securityDefinitions",
            "type": "Security Definitions Object",
            "description": "Security scheme definitions that can be used across the specification."
        }, {
            "name": "security",
            "type": ["Security Requirement Object"],
            "description": "A declaration of which security schemes are applied for the API as a whole. The list of values describes alternative security schemes that can be used (that is, there is a logical OR between the security requirements). Individual operations can override this definition."
        }, {
            "name": "tags",
            "type": ["Tag Object"],
            "description": "A list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared may be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique."
        }, {
            "name": "externalDocs",
            "type": "External Documentation Object",
            "description": "Additional external documentation."
        }]
    },
    "Tag": {
        "description": "Allows adding meta data to a single tag that is used by the Operation Object.\nIt is not mandatory to have a Tag Object per tag used there.\n",
        "allowExtension": true,
        "fields": [{
            "name": "name",
            "type": "string",
            "description": "The name of the tag.",
            "required": true
        }, {
            "name": "description",
            "type": "string",
            "description": "A short description for the tag.\nGFM syntax can be used for rich text representation.\n",
            "gfm": true
        }, {
            "name": "externalDocs",
            "type": "ExternalDocumentation",
            "description": "Additional external documentation for this tag."
        }]
    }
}
