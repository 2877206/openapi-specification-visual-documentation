Contact Object:
  description: Contact information for the exposed API.
  allowExtension: true
  fields:
    - name: name
      type: string
      description: The identifying name of the contact person/organization.
    - name: url
      type: string
      description: |
        The URL pointing to the contact information.  
        MUST be in the format of a URL.
    - name: email
      type: string
      description: |
        The email address of the contact person/organization.  
        MUST be in the format of an email address.

Definitions Object:
  description: An object to hold data types that can be consumed and produced by operations. These data types can be primitives, arrays or models.
  fields:
    -
      name: "{name}"
      type: Schema Object
      description: A single definition, mapping a *name* to the schema it defines.
      patterned: true

Example Object:
  description: Allows sharing examples for operation responses.
  fields:
    - name: "{mime type}"
      type: Any
      description: |
        The name of the property MUST be one of the Operation produces values (either implicit or inherited).  
        The value SHOULD be an example of what such a response would look like.
External Documentation Object:
  description: Allows referencing an external resource for extended documentation.
  allowExtension: true
  fields:
    -
      name: description
      type: string
      description: A short description of the target documentation.
      gfm: true
    -
      name: url
      type: string
      description: |
        The URL for the target documentation.  
        Value MUST be in the format of a URL.
      required: true

Header Object:
  fields:
    -
      name: description
      type: string
      description: A short description of the header.
    -
      name: type
      type: string
      description: The type of the object.
      values:
        - value: string
        - value: number
        - value: integer
        - value: boolean
        - value: array
    -
      name: default
      type: "*"
      description: |
        Declares the value of the header that the server will use if none is provided.  
        (Note: "default" has no meaning for required headers.)  
        See http://json-schema.org/latest/json-schema-validation.html#anchor101.  
        Unlike JSON Schema this value MUST conform to the defined type for the header.
    -
      name: <type is array>
      type: Header Object Array
      description: Fields if *type* is *array*.
    -
      name: <type is not array>
      type: Header Object Not Array
      description: Fields if *type* is *string*, *number*, *integer* or *boolean*.
Header Object Array:
  description: Fields if *type* is *array*.
  fieldsGroup: true
  fields:
    -
      name: items
      type: Items Object
      description: Describes the type of items in the array.
    -
      name: collectionFormat
      type: string
      description: |
        Determines the format of the array if type array is used.
      values:
        -
          value: csv
          description: Comma separated values *foo,bar*.
          default: true
        -
          value: ssv
          description: Space separated values *foo bar*.
        -
          value: tsv
          description: Tab separated values *foo\\tbar*.
        -
          value: pipes
          description: Pipe separated values *foo|bar*.
        -
          value: multi
          description: |
            Corresponds to multiple parameter instances instead of multiple values for a single instance *foo=bar&foo=baz*.
            This is valid only for parameters in *query* or *formData*.
    -
      name: maxItems
      type: number
      description: Maximum count of items in array
    -
      name: minItems
      type: number
      description: Minimum count of items in array.
    -
      name: uniqueItems
      type: boolean
      description: Allow only unique items in array.

Header Object Not Array:
  description: Fields if *type* is *string*, *number*, *integer* or *boolean*.
  fieldsGroup: true
  fields:
    -
      name: format
      type: string
      description: |
        The extending format for the previously mentioned type.  
        See Data Type Formats for further details.  
        
        Common Name | type | format| Comments
        ------------|------|-------|---------
        integer	    | integer | int32 | signed 32 bits
        long	      | integer	| int64	| signed 64 bits
        float	      | number	| float |	
        double	    | number	| double|	
        string	    | string	|       |	
        byte	      | string	| byte	| base64 encoded characters
        binary	    | string	| binary|	any sequence of octets
        boolean	    | boolean |       |		
        date	      | string	| date	| As defined by full-date - RFC3339
        dateTime	  | string	| date-time	| As defined by date-time - RFC3339
        password	  | string  |	password | Used to hint UIs the input needs to be obscured.
    -
      name: <type is string>
      type: Header Object String
      description: Fields if *type* is *string*.
    -
      name: <type is number or integer>
      type: Header Object Number Or Integer
      description: Fields if *type* is *number* or *integer*.
    -
      name: enum
      type: "[*]"
      description: |
        Authorized values.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor76.

Header Object Number Or Integer:
  description: A number or integer header
  fieldsGroup: true
  fields:
    -
      name: maximum
      type: number
      description: |
        Maximum value.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor17.
    -
      name: exclusiveMaximum
      type: boolean
      description: |
        Indicate if the value must be < maximum.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor17.
    -
      name: minimum
      type: number
      description: |
        Minimum value.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor21.
    -
      name: exclusiveMinimum
      type: boolean
      description: |
        Indicate if the value must value > minimum.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor21.
    -
      name: multipleOf
      type: number
      description: |
        The value must be a multiple of *multiplOf*.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor14.

Header Object String:
  description: A string header
  fieldsGroup: true
  fields:
    -
      name: pattern
      type: string
      description: |
        This string SHOULD be a valid regular expression, according to the ECMA 262 regular expression dialect.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor33.  
        See https://regex101.com/
    -
      name: maxLength
      type: integer
      description: |
        Maximum string's length.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor26.
    -
      name: minLength
      type: integer
      description: |
        Minimum string's length.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor29.

Headers Object:
  description: The name of the property corresponds to the name of the header. The value describes the type of the header.
  fields:
    -
      name: "{name}"
      patterned: true
      type: Header Object
      description: |
        The name of the property corresponds to the name of the header.  
        The value describes the type of the header.

Info Object:
  description: Provides metadata about the API. The metadata can be used by the clients if needed.
  allowExtension: true
  fields:
    - name: title
      type: string
      required: true
      description: The title of the application.
    - name: description
      type: string
      gfm: true
      description: A short description of the application.
    - name: termsOfService
      type: string
      description: The Terms of Service for the API.
    - name: contact
      type: Contact Object
      description: The contact information for the exposed API.
    - name: licence
      type: Licence Object
      description: The license information for the exposed API.
    - name: version
      type: string
      required: true
      description: Provides the version of the application API (not to be confused with the specification version).

Licence Object:
  description: License information for the exposed API.
  allowExtension: true
  fields:
    - name: name
      type: string
      required: true
      description: The license name used for the API.
    -
      name: url
      type: string
      description: |
        A URL to the license used for the API.  
        MUST be in the format of a URL.

Operation Object:
  description: Describes a single API operation on a path.
  allowExtension: true
  fields:
    -
      name: tags
      type: "[string]"
      description: |
        A list of tags for API documentation control.
        Tags can be used for logical grouping of operations by resources or any other qualifier.
    -
      name: summary
      type: string
      description: |
        A short summary of what the operation does.
        For maximum readability in the swagger-ui, this field SHOULD be less than 120 characters.
    -
      name: description
      type: string
      description: A verbose explanation of the operation behavior.
      gfm: true
    -
      name: externalDocs
      type: External Documentation Object
      description: Additional external documentation for this operation.
    -
      name: operationId
      type: string
      description: |
        Unique string used to identify the operation.
        The id MUST be unique among all operations described in the API.
        Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.
    -
      name: consumes
      type: "[string]"
      description: |
        A list of MIME types the operation can consume.
        This overrides the consumes definition at the Swagger Object.
        An empty value MAY be used to clear the global definition.
        Value MUST be as described under Mime Types.
    -
      name: produces
      type: "[string]"
      description: |
        A list of MIME types the operation can produce.
        This overrides the produces definition at the Swagger Object.
        An empty value MAY be used to clear the global definition.
        Value MUST be as described under Mime Types.
    -
      name: parameters
      type: "[Parameter Object]"
      description: |
        A list of parameters that are applicable for this operation.
        If a parameter is already defined at the Path Item, the new definition will override it, but can never remove it.
        The list MUST NOT include duplicated parameters.
        A unique parameter is defined by a combination of a name and location.
        The list can use the Reference Object to link to parameters that are defined at the Swagger Object's parameters.
        There can be one *body* parameter at most.
      allowReference: true
    -
      name: responses
      type: Responses Object
      required: true
      description: The list of possible responses as they are returned from executing this operation.
    -
      name: schemes
      type: "[string]"
      description: |
        The transfer protocol for the operation.
        The value overrides the Swagger Object schemes definition.
      values:
        - value: http
        - value: https
        - value: ws
          description: Web socket scheme
        - value: wss
          description: Secured web socket scheme
    -
      name: deprecated
      type: boolean
      description: |
        Declares this operation to be deprecated.
        Usage of the declared operation should be refrained.
        Default value is false.
    -
      name: security
      type: "[Security Requirement Object]"
      description: |
        A declaration of which security schemes are applied for this operation.
        The list of values describes alternative security schemes that can be used (that is, there is a logical OR between the security requirements).
        This definition overrides any declared top-level security.
        To remove a top-level security declaration, an empty array can be used.

Parameter Object:
  description: |
    Describes a single operation parameter.
    A unique parameter is defined by a combination of a name and location (in).
  allowExtension: true
  fields:
    -
      name: in
      type: string
      description: The location of the parameter.
      values:
        -
          value: query
          description: "Parameters that are appended to the URL.  For example, in */items?id=value*, the query parameter is id."
        -
          value: header
          description: Custom headers that are expected as part of the request.
        -
          value: path
          description: |
            Used together with Path Templating, where the parameter value is actually part of the operation's URL.
            This does not include the host or base path of the API.
            For example, in */items/{itemId}*, the path parameter is itemId.
        -
          value: formData
          description: |
            Used to describe the payload of an HTTP request when either *application/x-www-form-urlencoded* or *multipart/form-data* are used as the content type of the request (in Swagger's definition, the consumes property of an operation).
            This is the only parameter type that can be used to send files, thus supporting the file type.
            Since form parameters are sent in the payload, they cannot be declared together with a body parameter for the same operation.
            Form parameters have a different format based on the content-type used (for further details, consult http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4):

              - application/x-www-form-urlencoded - Similar to the format of Query parameters but as a payload.  For example, foo=1&bar=swagger - both foo and bar are form parameters. This is normally used for simple parameters that are being transferred.
              - multipart/form-data - Each parameter takes a section in the payload with an internal header.  For example, for the header Content-Disposition: form-data; name="submit-name" the name of the parameter is submit-name. This type of form parameters is more commonly used for file transfers.
        -
          value: body
          description: |
            The payload that's appended to the HTTP request.
            Since there can only be one payload, there can only be one body parameter.
            The name of the body parameter has no effect on the parameter itself and is used for documentation purposes only.
            Since Form parameters are also in the payload, body and form parameters cannot exist together for the same operation.
    -
      name: <in is body>
      type: Parameter Object Body
      description: Fields if *in* value is *body*.
    -
      name: <in is not body>
      type: Parameter Object Not Body
      description: Fields if *in* value is *query*, *header*, *path* or *formData*.
    -
      name: description
      type: string
      gfm: true
      description: |
        A brief description of the parameter.
        This could contain examples of use.
    -
      name: required
      type: boolean
      description: |
        Determines whether this parameter is mandatory.
        If the parameter is in *path*, this property is required and its value MUST be true.
        Otherwise, the property MAY be included and its default value is false.

Parameter Object Array:
  description:: Fields if parameter type is array.
  fieldsGroup: true
  fields:
    -
      name: items
      type: Items Object
      description: Describes the type of items in the array.
    -
      name: collectionFormat
      type: string
      description: |
        Determines the format of the array if type array is used.
      values:
        -
          value: csv
          description: Comma separated values *foo,bar*.
          default: true
        -
          value: ssv
          description: Space separated values *foo bar*.
        -
          value: tsv
          description: Tab separated values *foo\\tbar*.
        -
          value: pipes
          description: Pipe separated values *foo|bar*.
        -
          value: multi
          description: |
            Corresponds to multiple parameter instances instead of multiple values for a single instance *foo=bar&foo=baz*.
            This is valid only for parameters in *query* or *formData*.
    -
      name: maxItems
      type: number
      description: Maximum count of items in array
    -
      name: minItems
      type: number
      description: Minimum count of items in array.
    -
      name: uniqueItems
      type: boolean
      description: Allow only unique items in array.

Parameter Object Body:
  description: Fields if *in* value is *body*.
  fieldsGroup: true
  fields:
    -
      name: body
      required: true
      type: Schema Object
      description: The schema defining the type used for the body parameter.

Parameter Object File:
  description: A File parameter
  fieldsGroup: true
  fields:
    -
      name: maxLength
      type: integer
      description: See http://json-schema.org/latest/json-schema-validation.html#anchor26.
    -
      name: minLength
      type: integer
      description: See http://json-schema.org/latest/json-schema-validation.html#anchor29.

Parameter Object Not Array Or File:
  description: Fields if *type* value is *string*, *number*, *integer* or *boolean*.
  fieldsGroup: true
  fields:
    -
      name: format
      type: string
      description: |
        The extending format for the previously mentioned type.  
        See Data Type Formats for further details.  
        
        Common Name | type | format| Comments
        ------------|------|-------|---------
        integer	    | integer | int32 | signed 32 bits
        long	      | integer	| int64	| signed 64 bits
        float	      | number	| float |	
        double	    | number	| double|	
        string	    | string	|       |	
        byte	      | string	| byte	| base64 encoded characters
        binary	    | string	| binary|	any sequence of octets
        boolean	    | boolean |       |		
        date	      | string	| date	| As defined by full-date - RFC3339
        dateTime	  | string	| date-time	| As defined by date-time - RFC3339
        password	  | string  |	password | Used to hint UIs the input needs to be obscured.
    -
      name: allowEmptyValue
      type: boolean
      description: |
        Sets the ability to pass empty-valued parameters.
        This is valid only for either query or formData parameters and allows you to send a parameter with a name only or an empty value.  
        Default value is false.
    -
      name: <type is string>
      type: Parameter Object String
      description: Fields if *type* is *string*.
    -
      name: <type is number or integer>
      type: Parameter Object Number Or Integer
      description: Fields if *type* is *number* or *integer*.
    -
      name: enum
      type: "[Any]"
      description: |
        Authorized values.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor76.

Parameter Object Not Body:
  description: Fields if *in* value is *query*, *header*, *path* or *formData*.
  fieldsGroup: true
  fields:
    -
      name: type
      type: string
      description: |
        The type of the parameter.
        Since the parameter is not located at the request body, it is limited to simple types (that is, not an object).
      values:
        - value: string
        - value: number
        - value: integer
        - value: boolean
        - value: array
        - value: file
          description: If type is *file*, the consumes MUST be either *multipart/form-data* or *application/x-www-form-urlencoded* and the parameter MUST be in *formData*.
    -
      name: <type is array>
      type: Parameter Object Array
      description: Fields if *type* value is *array*.
    -
      name: <type is file>
      type: Parameter Object File
      description: Fields if *type* value is *file*.
    -
      name: <type is not array or file>
      type: Parameter Object Not Array Or File
      description: Fields if *type* value is *string*, *number*, *integer* or *boolean*.
    -
      name: default
      description: |
        Declares the value of the parameter that the server will use if none is provided.
        For example a *count* to control the number of results per page might default to 100 if not supplied by the client in the request.
        (Note: *default* has no meaning for required parameters.)
        Unlike JSON Schema this value MUST conform to the defined type for this parameter.
        See http://json-schema.org/latest/json-schema-validation.html#anchor101.
Parameter Object Number Or Integer:
  description: A number or integer parameter
  fieldsGroup: true
  fields:
    -
      name: maximum
      type: number
      description: |
        Maximum value.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor17.
    -
      name: exclusiveMaximum
      type: boolean
      description: |
        Indicate if the value must be < maximum.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor17.
    -
      name: minimum
      type: number
      description: |
        Minimum value.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor21.
    -
      name: exclusiveMinimum
      type: boolean
      description: |
        Indicate if the value must value > minimum.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor21.
    -
      name: multipleOf
      type: number
      description: |
        The value must be a multiple of *multiplOf*.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor14.

Parameter Object String:
  description: A string parameter
  fieldsGroup: true
  fields:
    -
      name: pattern
      type: string
      description: |
        This string SHOULD be a valid regular expression, according to the ECMA 262 regular expression dialect.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor33.  
        See https://regex101.com/
    -
      name: maxLength
      type: integer
      description: |
        Maximum string's length.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor26.
    -
      name: minLength
      type: integer
      description: |
        Minimum string's length.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor29.

Parameters Definitions Object:
  description:
  fields:
    -
      name: "{name}"
      type: Parameter Object
      description: A single parameter definition, mapping a *name* to the parameter it defines.
      patterned: true

Path Item Object:
  description: |
    Describes the operations available on a single path.
    A Path Item may be empty, due to ACL constraints.
    The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.
  allowExtension: true
  fields:
    -
      name: $ref
      type: string
      description: |
        Allows for an external definition of this path item.
        The referenced structure MUST be in the format of a Path Item Object.
        If there are conflicts between the referenced definition and this Path Item's definition, the behavior is undefined.
    -
      name: get
      type: Operation Object
      description: A definition of a GET operation on this path.
    -
      name: put
      type: Operation Object
      description: A definition of a PUT operation on this path.
    -
      name: post
      type: Operation Object
      description: A definition of a POST operation on this path.
    -
      name: delete
      type: Operation Object
      description: A definition of a DELETE operation on this path.
    -
      name: options
      type: Operation Object
      description: A definition of a OPTIONS operation on this path.
    -
      name: head
      type: Operation Object
      description: A definition of a HEAD operation on this path.
    -
      name: patch
      type: Operation Object
      description: A definition of a PATCH operation on this path.
    -
      name: parameters
      type: "[Parameter Object]"
      allowReference: true
      description: |
        A list of parameters that are applicable for all the operations described under this path.
        These parameters can be overridden at the operation level, but cannot be removed there.
        The list MUST NOT include duplicated parameters.
        A unique parameter is defined by a combination of a name and location.
        The list can use the Reference Object to link to parameters that are defined at the Swagger Object's parameters.
        There can be one *body* parameter at most.

Paths Object:
  description: |
    Holds the relative paths to the individual endpoints.
    The path is appended to the basePath in order to construct the full URL.
    The Paths may be empty, due to ACL constraints.
  allowExtension: true
  fields:
    - name: "/{path}"
      type: Path Item Object
      required: true
      description: |
        A relative path to an individual endpoint.
        The field name MUST begin with a slash.
        The path is appended to the basePath in order to construct the full URL.
        Path templating is allowed.

Reference Object:
  description: |
    A simple object to allow referencing other definitions in the specification.
    It can be used to reference parameters and responses that are defined at the top level for reuse.
    The Reference Object is a JSON Reference that uses a JSON Pointer as its value.
    For this specification, only canonical dereferencing is supported.
  fields:
    -
      name: $ref
      type: string
      description: The reference string.
      required: true

Response Object:
  description: Describes a single response from an API Operation.
  allowExtension: true
  fields:
    -
      name: description
      type: string
      required: true
      gfm: true
      description: A short description of the response. GFM syntax can be used for rich text representation.
    -
      name: schema
      type: Schema Object
      description: |
        A definition of the response structure.
        It can be a primitive, an array or an object.
        If this field does not exist, it means no content is returned as part of the response.
        As an extension to the Schema Object, its root type value may also be "file".
        This SHOULD be accompanied by a relevant produces mime-type.
    -
      name: headers
      type: Headers Object
      description: A list of headers that are sent with the response.
    -
      name: example
      type: Example Object
      description: An example of the response message.

Responses Definitions Object:
  description: |
    An object to hold responses to be reused across operations.
    Response definitions can be referenced to the ones defined here.
    This does not define global operation responses.
  fields:
    -
      name: "{name}"
      type: Response Object
      patterned: true
      description: A single response definition, mapping a "name" to the response it defines.

Responses Object:
  description: |
    A container for the expected responses of an operation. The container maps a HTTP response code to the expected response. It is not expected from the documentation to necessarily cover all possible HTTP response codes, since they may not be known in advance. However, it is expected from the documentation to cover a successful operation response and any known errors.
      
    The default can be used a default response object for all HTTP codes that are not covered individually by the specification.
      
    The Responses Object MUST contain at least one response code, and it SHOULD be the response for a successful operation call.
  allowExtension: true
  fields:
    -
      name: default
      allowReference: true
      type: Response Object
      description: The documentation of responses other than the ones declared for specific HTTP response codes. It can be used to cover undeclared responses. Reference Object can be used to link to a response that is defined at the Swagger Object's responses section.
    -
      name: "{HTTP status code}"
      allowReferene: true
      type: Response Object
      description: Any HTTP status code can be used as the property name (one property per HTTP status code). Describes the expected response for that HTTP status code. Reference Object can be used to link to a response that is defined at the Swagger Object's responses section.
Schema Object:
  description: |
    The Schema Object allows the definition of input and output data types.
    These types can be objects, but also primitives and arrays.
    This object is based on the JSON Schema Specification Draft 4 and uses a predefined subset of it.
    On top of this subset, there are extensions provided by this specification to allow for more complete documentation.
  fields:
    -
      name: '$ref'
      type: string
      description: A JSON Reference
    - 
      name: title
      type: string
      description: The object's title
    -
      name: description
      type: String
      gfm: true
      description: The object's description
    -
      name: default
      type: '*' 
      description: The default value. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object.
    - 
      name: enum
      type: '[*]'
      description: Object's authorized values
    - 
      name: allOf
      type: '[Schema Object | Reference Object]'
      noFollow: true 
      description: |
        Swagger allows combining and extending model definitions using the allOf property of JSON Schema, in effect offering model composition. allOf takes in an array of object definitions that are validated independently but together compose a single object.  
        While composition offers model extensibility, it does not imply a hierarchy between the models. To support polymorphism, Swagger adds the support of the discriminator field. When used, the discriminator will be the name of the property used to decide which schema definition is used to validate the structure of the model. As such, the discriminator field MUST be a required field. The value of the chosen property has to be the friendly name given to the model under the definitions property. As such, inline schema definitions, which do not have a given id, cannot be used in polymorphism.
    - 
      name: type
      description: Object's type
      values:
        -
          value: array
          description: A JSON array.
        -
          value: boolean
          description: A JSON boolean.
        -
          value: integer
          description: A JSON number without a fraction or exponent part.
        -
          value: number
          description: Any JSON number. Number includes integer.
        -
          value: 'null'
          description: The JSON null value.
        -
          value: object
          description: A JSON object.
          default: true
        -
          value: string
          description: A JSON string.
    -
      name: <type is array>
      type: Schema Object Array
      description: Fields when *type* is *array*
    -
      name: <type is string>
      type: Schema Object String
      description: Fields when *type* is *string*
    -
      name: <type is number or integer>
      type: Schema Object Number Or Integer
      description: Fields when *type* is *number* or *integer*
    -
      name: <type is object>
      type: Schema Object Object
      description: Fields when *type* is *object*
Schema Object Array:
  description:: Fields if type is array.
  fieldsGroup: true
  fields:
    -
      name: items
      type: Items Object
      description: Describes the type of items in the array.
    -
      name: maxItems
      type: number
      description: Maximum count of items in array
    -
      name: minItems
      type: number
      description: Minimum count of items in array.
    -
      name: uniqueItems
      type: boolean
      description: Allow only unique items in array.

Schema Object Number Or Integer:
  description: A number or integer value
  fieldsGroup: true
  fields:
    -
      name: format
      type: string
      description: |
        The extending format for the previously mentioned type.  
        See Data Type Formats for further details.  
        
        Common Name | type | format| Comments
        ------------|------|-------|---------
        integer	    | integer | int32 | signed 32 bits
        long	      | integer	| int64	| signed 64 bits
        float	      | number	| float |	
        double	    | number	| double|	

    -
      name: maximum
      type: number
      description: |
        Maximum value.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor17.
    -
      name: exclusiveMaximum
      type: boolean
      description: |
        Indicate if the value must be < maximum.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor17.
    -
      name: minimum
      type: number
      description: |
        Minimum value.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor21.
    -
      name: exclusiveMinimum
      type: boolean
      description: |
        Indicate if the value must value > minimum.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor21.
    -
      name: multipleOf
      type: number
      description: |
        The value must be a multiple of *multiplOf*.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor14.

Schema Object Object:
  fieldsGroup: true
  description: type value is object.
  fields:  
    - 
      name: properties
      description: List of properties.
      type: '[Schema Object | Reference Object]'
      noFollow: true
    - 
      name: additionalProperties
      description: Additionnal properties to create a map.
      type: '[Schema Object | Reference Object]'
      noFollow: true
    - 
      name: required
      type: [string]
      description: The list of required properties.
    - 
      name: maxProperties
      type: integer
      description: An object instance is valid against "maxProperties" if its number of properties is less than, or equal to, the value of this keyword.
    - 
      name: minProperties
      type: integer
      description: An object instance is valid against "minProperties" if its number of properties is greater than, or equal to, the value of this keyword.
Schema Object String:
  description: type value is string
  fieldsGroup: true
  fields:
    -
      name: format 
      type: String
      description: |
        The extending format for the previously mentioned type.  
        See Data Type Formats for further details.  
        
        Common Name | format    | Comments
        ------------|-----------|---------
        byte	      | byte	    | base64 encoded characters
        binary	    | binary    |	any sequence of octets
        date	      | date	    | As defined by full-date - RFC3339
        dateTime	  | date-time	| As defined by date-time - RFC3339
        password	  | password  | Used to hint UIs the input needs to be obscured.
    -
      name: pattern
      type: string
      description: |
        This string SHOULD be a valid regular expression, according to the ECMA 262 regular expression dialect.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor33.  
        See https://regex101.com/
    -
      name: maxLength
      type: integer
      description: |
        Maximum string's length.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor26.
    -
      name: minLength
      type: integer
      description: |
        Minimum string's length.  
        See http://json-schema.org/latest/json-schema-validation.html#anchor29.

Schema Object Swagger:
  fieldsGroup: true
  description: The following properties are taken directly from the JSON Schema definition and follow the same specifications.
  fields:
    - 
      name: discriminator
      type: string
      description: |
        Adds support for polymorphism.  
        The discriminator is the schema property name that is used to differentiate between other schema that inherit this schema.  
        The property name used MUST be defined at this schema and it MUST be in the required property list.  
        When used, the value MUST be the name of this schema or any schema that inherits it.
    -
      name: readOnly
      type: boolean
      description: |
        Relevant only for Schema "properties" definitions. Declares the property as "read only". This means that it MAY be sent as part of a response but MUST NOT be sent as part of the request. Properties marked as readOnly being true SHOULD NOT be in the required list of the defined schema. Default value is false.
    -
      name: xml
      type: XML Object
      description: |
        This MAY be used only on properties schemas. It has no effect on root schemas.  
        Adds Additional metadata to describe the XML representation format of this property.
    -
      name: externalDocs
      type: External Documentation Object
      description: Additional external documentation for this schema.
    -
      name: example
      type: Any
      description: A free-form property to include an example of an instance for this schema.
Scopes Object:
  description:
  allowExtension: true
  fields:
    -
      name: "{name}"
      type: string
      description: Maps between a name of a scope to a short description of it (as the value of the property).
      patterned: true

Security Definitions Object:
  description: |
    A declaration of the security schemes available to be used in the specification.  
    This does not enforce the security schemes on the operations and only serves to provide the relevant details for each scheme.
  allowExtension: true
  fields:
    -
      name: "{name}"
      type: Security Scheme Object
      description: A single security scheme definition, mapping a *name* to the scheme it defines.
      patterned: true

Security Requirement Object:
  allowExtension: true
  fields:
    -
      name: "{name}"
      type: "[string]"
      description: |
        Each name must correspond to a security scheme which is declared in the Security Definitions.  
        If the security scheme is of type *oauth2*, then the value is a list of scope names required for the execution.  
        For other security scheme types, the array MUST be empty.

Security Scheme Object:
  description: |
    Allows the definition of a security scheme that can be used by the operations.
    Supported schemes are basic authentication, an API key (either as a header or as a query parameter) and OAuth2's common flows (implicit, password, application and access code).
  allowExtension: true
  fields:
    -
      name: type
      type: string
      description: The type of the security scheme.
      required: true
      values:
        - value: basic
        - value: apiKey
        - value: oauth2
    -
      name: description
      type: string
      description: A short description for security scheme.
    -
      name: <type is apiKey>
      type: Security Scheme Object ApiKey
      description: Fields if *type* value is *apiKey*.
    -
      name: <type is oauth2>
      type: Security Scheme Object Oauth
      description: Fields if *type* value is *oauth2*.

Security Scheme Object ApiKey:
  description:
  fieldsGroup: true
  fields:
    -
      name: apiKey
      type: string
      description: The name of the header or query parameter to be used.
      required: true
    -
      name: in
      type: string
      description: The location of the API key.
      required: true
      values:
        - value: query
        - value: header

Security Scheme Object Oauth:
  description:
  fieldsGroup: true
  fields:
    -
      name: flow
      type: string
      description: The flow used by the OAuth2 security scheme.
      values:
        - value: implicit
        - value: password
        - value: application
        - value: accessCode
      required: true
    -
      name: authorizationUrl
      type: string
      description: The authorization URL to be used for this flow (implicit or access code). This SHOULD be in the form of a URL.
      required: true
    -
      name: tokenUrl
      type: string
      description: The token URL to be used for this flow (password, application or access code). This SHOULD be in the form of a URL.
      required: true
    -
      name: scopes
      type: Scopes Object
      description: The available scopes for the OAuth2 security scheme.

Specification Extensions:
  name: ^x-
  type: Any
  patterned: true
  swaggerType: true
  description: |
    While the Swagger Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.  
    The field name MUST begin with *x-*, for example, *x-internal-id.*  
    The value can be null, a primitive, an array or an object.  
    When the value is an object or an array of object, the object's fields names do not need to start with *x-*.  
    The extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).

Swagger Object:
  name: Swagger definition
  description: |
    This is the *root* document object for the API specification.  
    It combines what previously was the Resource Listing and API Declaration (version 1.2 and earlier) together into one document.
  allowExtension: true
  fields:
    - name: swagger
      type: string
      required: true
      description: |
        Specifies the Swagger Specification version being used.  
        It can be used by the Swagger UI and other clients to interpret the API listing.
      values:
        - value: "2.0"
          description: The value MUST be 2.0
    - name: info
      type: Info Object
      required: true
      description: |
        Provides metadata about the API.  
        The metadata can be used by the clients if needed.
    - name : host
      type: string
      description: |
        The host (name or ip) serving the API.  
        This MUST be the host only and does not include the scheme nor sub-paths.  
        It MAY include a port.  
        If the host is not included, the host serving the documentation is to be used (including the port).  
        The host does not support path templating.
    - name: basePath
      type: string
      required: false
      description: |
        The base path on which the API is served, which is relative to the host.  
        If it is not included, the API is served directly under the host.  
        The value MUST start with a leading slash (/).  
        The basePath does not support path templating.
    - name: schemes
      type: [string]
      description: |
        The transfer protocol of the API.  
        If the schemes is not included, the default scheme to be used is the one used to access the Swagger definition itself.
      values:
        - value: http
        - value: https
        - value: ws
          description: "[Web socket](https://en.wikipedia.org/wiki/WebSocket) scheme"
        - value: wss
          description: "Secured [web socket](https://en.wikipedia.org/wiki/WebSocket) scheme"
    - name: consumes
      type: [string]
      description: |
        A list of MIME types the APIs can consume.  
        This is global to all APIs but can be overridden on specific API calls.  
        Value MUST be as described under Mime Types.
    - name: produces
      type: [string]
      description: |
        A list of MIME types the APIs can produce.  
        This is global to all APIs but can be overridden on specific API calls.  
        Value MUST be as described under Mime Types.
    - name: paths
      type: Paths Object
      required: true
      description: The available paths and operations for the API.
    - name: definitions
      type: Definitions Object
      description: An object to hold data types produced and consumed by operations.
    - name: parameters
      type: Parameters Definitions Object
      description: |
        An object to hold parameters that can be used across operations.  
        This property does not define global parameters for all operations.
    - name: responses
      type: Responses Definitions Object
      description: |
        An object to hold responses that can be used across operations.  
        This property does not define global responses for all operations.
    - name: securityDefinitions
      type: Security Definitions Object
      description: Security scheme definitions that can be used across the specification.
    - name: security
      type: "[Security Requirement Object]"
      description: |
        A declaration of which security schemes are applied for the API as a whole.  
        The list of values describes alternative security schemes that can be used (that is, there is a logical OR between the security requirements).  
        Individual operations can override this definition.
    - name: tags
      type: "[Tag Object]"
      description: |
        A list of tags used by the specification with additional metadata.  
        The order of the tags can be used to reflect on their order by the parsing tools.  
        Not all tags that are used by the *Operation Object* must be declared.  
        The tags that are not declared may be organized randomly or based on the tools' logic.  
        Each tag name in the list MUST be unique.
    - name: externalDocs
      type: External Documentation Object
      description: Additional external documentation.

Tag Object:
  description: |
    Allows adding meta data to a single tag that is used by the *Operation Object*.  
    It is not mandatory to have a Tag Object per tag used there.
  allowExtension: true
  fields:
    -
      name: name
      type: string
      description: The name of the tag.
      required: true
    -
      name: description
      type: string
      description: A short description for the tag.
      gfm: true
    -
      name: externalDocs
      type: ExternalDocumentation
      description: Additional external documentation for this tag.
